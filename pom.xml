<?xml version="1.0" encoding="UTF-8"?>
<!-- pom.xml files should be structured following the model found at https://maven.apache.org/ref/3.8.3/maven-model/maven.html -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.studo</groupId>
    <artifactId>studo-services</artifactId>
    <version>1.0.0</version>

    <properties>
        <!-- general encoding settings -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- general compiler settings -->
        <maven.compiler.target>11</maven.compiler.target>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.forceJavacCompilerUse>true</maven.compiler.forceJavacCompilerUse>
        <maven.compiler.parameters>true</maven.compiler.parameters>

        <!-- Kotlin -->
        <kotlin.version>1.7.0</kotlin.version>
        <kotlin.compiler.incremental>true</kotlin.compiler.incremental>

        <!-- CAMPUSonline COnX platform version -->
        <conx.platform.version>1.2.0</conx.platform.version>
        <!-- the quarkus platform version must correlate to the COnX platform version -->
        <quarkus.platform.version>2.6.2.Final</quarkus.platform.version>

        <maven.repository>https://nexus.campusonline.community/repository/campusonline-public-maven</maven.repository>
        <npm.registry>https://nexus.campusonline.community/repository/campusonline-public-npm/</npm.registry>

        <!-- docker registry (can be overridden) and image name -->
        <docker.registry>docker.campusonline.community</docker.registry>
        <docker.group>studo</docker.group>
        <docker.artefact.id>${project.artifactId}</docker.artefact.id>
        <docker.artefact.version>${project.version}</docker.artefact.version>
    </properties>

    <!-- we import the COnX platform dependency versions -->
    <!-- the COnX platform dependencies are a set of managed dependencies that will fit together -->
    <!-- this also implies a fixed quarkus version will be imported -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>at.campusonline.conx.api</groupId>
                <artifactId>pub-universe-bom</artifactId>
                <version>${conx.platform.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- QUARKUS dependencies -->
        <!-- we use resteasy for our JAX-RS implementation under the hood -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy</artifactId>
        </dependency>
        <!-- we use hibernate as JPA provider under the hood -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-hibernate-orm</artifactId>
        </dependency>
        <!-- for JPA queries and repositories we use the panache framework -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-hibernate-orm-panache</artifactId>
        </dependency>
        <!-- we also like to use bean validation -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-hibernate-validator</artifactId>
        </dependency>
        <!-- for json serialization we use resteasy jsonb -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-jsonb</artifactId>
        </dependency>
        <!-- for xml serialization we use resteasy jaxb -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-jaxb</artifactId>
        </dependency>
        <!-- to communicate with other rest services we use the quarkus restclient (microprofile) -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-rest-client</artifactId>
        </dependency>
        <!-- for the openapi.yaml file generation we include also smallrye-openapi -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-openapi</artifactId>
        </dependency>
        <!-- to support the login with keycloak we use the oidc dependency -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-oidc</artifactId>
        </dependency>
        <!-- we authenticate our app by using access tokens which are generated by keycloak -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-oidc-client</artifactId>
        </dependency>
        <!-- to append the access tokens generated by keycloak to our rest requests we use this dependency -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-oidc-client-filter</artifactId>
        </dependency>
        <!-- we install our database changes by using liquibase -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-liquibase</artifactId>
        </dependency>
        <!-- we prefer to use yaml for our application properties -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-config-yaml</artifactId>
        </dependency>
        <!-- for our health endpoints we use smallrye-health (microprofile) -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-health</artifactId>
        </dependency>
        <!-- we use reactive routes for our AppHackAuthenticationInterceptorFilter which solves the DAD problem  -->
        <!-- the quarkus oidc plugin can not handle the DAD in the URL -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-reactive-routes</artifactId>
        </dependency>
        <!-- we use undertow to specify our servlet configuration for serving the frontend -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-undertow</artifactId>
        </dependency>
        <!-- build and push docker images -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-container-image-jib</artifactId>
        </dependency>
        <!-- quarkus caching api -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-cache</artifactId>
        </dependency>

        <!-- TESTING dependencies -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-jdbc-h2</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5-mockito</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-test-security</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-test-security-oidc</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-inline</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- third party dependencies (only the oracle jdbc driver) -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-jdbc-oracle</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!-- COnX dependencies -->

        <!-- the campusonline-extension supports the encryption of secrets -->
        <dependency>
            <groupId>at.campusonline.conx.quarkus</groupId>
            <artifactId>campusonline-extension</artifactId>
            <version>2.4.1.Final</version>
        </dependency>
        <!-- we use the auth api for authentication and authorization -->
        <dependency>
            <groupId>at.campusonline.conx.api</groupId>
            <artifactId>pub-auth-api</artifactId>
        </dependency>
        <!-- for authentication and authorization we need to import the quarkus specific implementation -->
        <dependency>
            <groupId>at.campusonline.conx.api</groupId>
            <artifactId>pub-auth-api-impl-quarkus</artifactId>
        </dependency>
        <!-- we need the dad hack dependency to support the DAD in the oidc plugin -->
        <dependency>
            <groupId>at.campusonline.conx.api</groupId>
            <artifactId>pub-auth-api-oidc-dad-hack-quarkus</artifactId>
        </dependency>
        <!-- Endpoints for authentication and authorization -->
        <dependency>
            <groupId>at.campusonline.conx.api</groupId>
            <artifactId>pub-auth-api-rest-services</artifactId>
        </dependency>
        <!-- COnX library for internationalization -->
        <dependency>
            <groupId>at.campusonline.conx.api</groupId>
            <artifactId>pub-i18n-api-rest-services</artifactId>
        </dependency>
        <!-- COnX specific JAX-RS extensions -->
        <dependency>
            <groupId>at.campusonline.conx.api</groupId>
            <artifactId>pub-jaxrs-api</artifactId>
        </dependency>
        <!-- COnX exception Mapper -->
        <dependency>
            <groupId>at.campusonline.conx.api</groupId>
            <artifactId>pub-jaxrs-standard-error-mapper</artifactId>
        </dependency>
        <!-- we want to use special logging (Intellij http file style) for incoming and outgoing REST requests -->
        <dependency>
            <groupId>at.campusonline.conx.api</groupId>
            <artifactId>pub-jaxrs-api-logging-impl</artifactId>
        </dependency>
        <!-- we want to use special logging (Intellij http file style) for incoming and outgoing REST requests -->
        <dependency>
            <groupId>at.campusonline.conx.api</groupId>
            <artifactId>pub-jaxrs-api-impl-quarkus</artifactId>
        </dependency>
        <!-- endpoints to show CAMPUSonline desktop specific information in the app  -->
        <dependency>
            <groupId>at.campusonline.conx.api</groupId>
            <artifactId>pub-desktop-rest-services-quarkus-impl</artifactId>
        </dependency>
        <!-- COnX specific status and version endpoints -->
        <dependency>
            <groupId>at.campusonline.conx.api</groupId>
            <artifactId>pub-jaxrs-status-service</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
            <version>${kotlin.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-test</artifactId>
            <version>${kotlin.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <repositories>
        <repository>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>daily</updatePolicy>
            </snapshots>
            <id>campusonline-public-maven</id>
            <name>CAMPUSonline Public Maven Repository</name>
            <url>${maven.repository}</url>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>campusonline-public-maven-plugins</id>
            <name>CAMPUSonline Public Maven Plugin Repository</name>
            <url>${maven.repository}</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.2.0</version>
            </plugin>
            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <version>${kotlin.version}</version>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <sourceDirs>
                                <sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
                                <sourceDir>${project.basedir}/src/main/java</sourceDir>
                            </sourceDirs>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>test-compile</phase>
                        <goals> <goal>test-compile</goal> </goals>
                    </execution>
                </executions>
                <configuration>
                    <jvmTarget>1.8</jvmTarget>
                </configuration>
            </plugin>
            <plugin>
                <!-- we filter resources located in /deployment to /target/deployment -->
                <!-- in addition we create a project specific .npmrc -->
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>process-npmrc</id>
                        <goals>
                            <goal>resources</goal>
                        </goals>
                        <phase>process-resources</phase>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/frontend/npmrc</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                            <outputDirectory>${project.basedir}/frontend</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>process-deployment-resources</id>
                        <goals>
                            <goal>resources</goal>
                        </goals>
                        <phase>process-resources</phase>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/deployment</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                            <outputDirectory>${project.build.directory}/deployment</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


            <!-- we use the maven-surefire-plugin for running tests -->
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M5</version>
                <configuration>
                    <systemProperties>
                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                    </systemProperties>
                </configuration>
            </plugin>

            <!-- we skip the deployment of the jar because we are no library project -->
            <plugin>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>2.8.2</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>

            <!-- we use the quarkus-maven-plugin to prepare the compiled artifacts to run in a docker container -->
            <plugin>
                <groupId>io.quarkus</groupId>
                <artifactId>quarkus-maven-plugin</artifactId>
                <version>${quarkus.platform.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <configuration>
                            <systemProperties>
                                <project.version>${project.version}</project.version>
                            </systemProperties>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- we use the co-openapi-generator to generate an openapi file which is used for TS model generation -->
            <plugin>
                <groupId>at.campusonline.conx.mojo</groupId>
                <artifactId>co-openapi-mojo-generator</artifactId>
                <version>1.0.0</version>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>gen-pub-openapi</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <outputDirectory>${project.build.directory}/openapi</outputDirectory>
                </configuration>
            </plugin>

            <!-- frontend build, we use the frontend-maven-plugin to specify a fix node and npm version -->
            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>1.12.0</version>
                <configuration>
                    <workingDirectory>frontend</workingDirectory>
                </configuration>
                <executions>
                    <!-- we use a fix node and npm version -->
                    <execution>
                        <id>install node and npm</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                        <configuration>
                            <!-- Make sure these match the version you installed on your system -->
                            <nodeVersion>v14.17.4</nodeVersion>
                            <npmVersion>6.14.14</npmVersion>
                        </configuration>
                    </execution>
                    <!-- we generate the typescript model by using the previously generated openapi.yaml file -->
                    <execution>
                        <id>gen-from-backend-model</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>npx</goal>
                        </goals>
                        <configuration>
                            <arguments>openapi-typescript@2.4.2 ${project.build.directory}/openapi/openapi.yaml -o meta/model.ts</arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <!-- we install all npm dependencies -->
                        <id>npm install</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <!-- Optional configuration which provides for running any yarn command -->
                        <configuration>
                            <arguments>install</arguments>
                        </configuration>
                    </execution>
                    <!-- we run a frontend production build -->
                    <execution>
                        <id>npm run build for production</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <configuration>
                            <arguments>run build-prod</arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>at.campusonline.conx.maven</groupId>
                <artifactId>conx-maven-plugin</artifactId>
                <version>0.1.0</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <parameters>${maven.compiler.parameters}</parameters>
                </configuration>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>testCompile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
